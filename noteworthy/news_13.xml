<?xml version="1.0" encoding="iso-8859-1" ?>
<!--
 Copyright (c) 2009 EclipseSource and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 -->
 
<noteworthy version="1.3">
   <entry category="RWT" milestone="M1">
     <title>
       CSS Gradients and Rounded Borders
     </title>
     <description>
       <![CDATA[
        The RAP theming now supports gradients and rounded borders for many
        widgets.
        Both features are implemented using vector graphics (SVG/VML) on the
        client-side.
        Of course, this works with all browsers supported by RAP.
        <br/>
        <img style="margin: 10px 10px 0px;" src="GradientsAndRoundedBorders.png" />
        <br />
        For gradients we followed the CSS syntax
        <a href="http://webkit.org/blog/175/introducing-css-gradients/">implemented by Safari</a>,
        as there is no official CSS syntax around.
        Beside a start color and an end color, you can also define any
        number of intermediate steps.
        Currently, only vertical linear gradients are supported.
        <pre>
  background-image: gradient(
    linear, left top, left bottom,
    from( #ffffff ),
    color-stop( 48%, #f0f0f0 ),
    color-stop( 52%, #e0e0e0 ),
    to( #cccccc )
  );
        </pre>
        For rounded borders, we followed the approach outlined in the
        <a href="http://www.w3.org/TR/css3-background/#the-border-radius">CSS Backgrounds and Borders Module</a>.
        You can set rounded borders using the <code>border-radius</code>
        property, even a different radius for every corner is possible.
        <pre>
  border: 2px solid #005092;
  border-radius: 6px;
        </pre>  
        ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M1">
     <title>
       New API added
     </title>
     <description>
       <![CDATA[
            This will make it easier for the community to reuse existing code or
        to utilize new features.
        Here is a list of API methods added in this milestone:
        <br />
        <ul>
          <li><code>ActionFactory#RESET_PERSPECTIVE</code></li>
          <li><code>Combo#getSelection()</code> and
              <code>Combo#setTextLimit()</code></li>
          <li><code>Composite#setLayoutDeferred( boolean )</code></li>
          <li><code>CTabFolder#setUnselectedImageVisible( boolean )</code> and
              <code>CTabFolder#setSelectionBackground( Color[],int[] )</code>
          </li>
          <li><code>Display#getSystemCursor( int )</code></li>
          <li><code>List#getTopIndex</code> and
              <code>List#setTopIndex</code></li>
          <li><code>List#showSelection()</code></li>
          <li><code>ProgressBar#setState()</code></li>
          <li><code>Shell#setModified( boolean )</code></li>
          <li><code>Spinner#getText()</code>,
              <code>Spinner#getTextLimit()</code> and
              <code>Spinner#setTextLimit( int )</code></li>
          <li><code>SWT.TOOL</code> style flag for <code>Shell</code></li>
          <li><code>ToolBar#getItem( Point )</code></li>
          <li><code>Widget#getListeners( int )</code> and
              <code>Widget#isListening( int )</code></li>
        </ul>  
        ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M1">
     <title>
       Help Events
     </title>
     <description>
       <![CDATA[
        It is now possible to attach help listeners to controls and menus. 
        These events are generated when help is requested for a control or
        menu, typically when the user presses F1.  
        ]]>
     </description>
   </entry>
   <entry category="JFace / Workbench" milestone="M1">
     <title>
       Cheatsheet support
     </title>
     <description>
       <![CDATA[
        With the support of the FormText widget we now provide an
        implementation of the cheatsheets plugin known from RCP. With this
        it's possible to provide step-by-step cheatsheets with direct
        integration of the application itself.
        <br />
        <img style="margin: 10px 10px 0px;" src="cheatsheets.png" />
        <br />
        See the
        <a href="http://help.eclipse.org/galileo/topic/org.eclipse.platform.doc.isv/guide/ua_cheatsheet.htm">Eclipse help</a>
        for more informations about cheatsheets and how to use them. 
        ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M2">
     <title>
       Infrastructure for client-side unit tests
     </title>
     <description>
       <![CDATA[
        The new Javascript-Testrunner enables developers to write client-side 
        tests for their custom-widgets using a JUnit-like syntax. The 
        TestRunner also includes tools to simulate client-server communication 
        and user-interactions. A simple test-case might look like this:
        <pre>
  qx.Class.define( "com.example.widgets.tests.CustomWidgetTest", {
      extend : qx.core.Object,
      members : {
        testText : function() {
          var widget = new com.example.widgets.CustomWidget();
          widget.setText( "Hello World!" );
          assertEquals( "Hello World!", widget.getText() );
        }
      }
    } );
        </pre>
        <br />
        If any assert fails, the TestRunner will inform the developer via 
        its very simple UI and freeze Qooxdoo to ease debugging.
        <br />
        The project is located in the <a href="../cvs.php">RAP CVS</a>
        under <code>runtime.rwt.test/org.eclipse.rap.rwt.q07.jstest</code>. 
         ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M2">
     <title>
       DateTime DROP_DOWN
     </title>
     <description>
       <![CDATA[
            The DateTime widget now supports the <code>SWT.DROP_DOWN</code> style.
        <pre>
  DateTime dateTime = new DateTime( parent, SWT.DATE | SWT.DROP_DOWN );
        </pre>
        <br />
        <img src="RAPDateTimeDropDown.png" 
             title="DateTime widget with DROP_DOWN style"
             style="margin-top:10px; margin-bottom:10px" />
        <br />
        The appearance of the drop-down button can be changed with CSS in 
        the same way like in Combo. 
          ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M2">
     <title>
       Compression Turned Off by Default
     </title>
     <description>
       <![CDATA[
            Until now, responses sent by RAP were compressed using gzip. When 
        running on Tomcat, this could lead to character garbage being delivered 
        to the browser (see 
        <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=259977">bug 
        259977</a>).
        <br />
        Therefore we decided to turn off compression in RAP by default 
        (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=285669">bug 
        285669</a>).
        Beside the issue in Tomcat, compression is a task that should rather 
        be done by the servlet container to give administrators better control 
        over the setup.
        <br />
        Compression can be turned on by specifying the VM argument 
        <code>org.eclipse.rwt.compression=true</code>. This is the default
        setting for newly created launch configurations. 
        ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M2">
     <title>
       New API added
     </title>
     <description>
       <![CDATA[
            Here is a list of API methods added in this milestone:
        <br />
        <ul>            
          <li><code>Text#getCaretPosition()</code></li>
          <li><code>CTabFolder#setSelectionBackground( Image )</code></li>
          <li><code>CTabItem#setShowClose( boolean )</code></li>
          <li><code>Display#getCursorLocation()</code></li>            
          <li><code>Control#isReparentable()</code> and 
              <code>Control#setParent()</code></li>            
          <li><code>SWT.SHEET</code> style flag for <code>Shell</code></li>
          <li><code>Tree#select( TreeItem )</code> and 
              <code>Tree#deselect( TreeItem )</code></li>
          <li><code>Shell#setImages( Image[] )</code> and 
              <code>Shell#getImages()</code>
          <li><code>Shell#setMinimumSize( int, int )</code>, 
              <code>Shell#setMinimumSize( Point )</code> and 
              <code>Shell#getMinimumSize()</code></li>
          <li><code>List#deselect( int )</code>, 
              <code>List#deselect( int, int )</code> and
              <code>List#deselect( int[] )</code></li>
          <li><code>Control#update()</code> and 
              <code>Display#update()</code></li> 
          <li><code>ScrolledComposite#showControl( Control )</code>, 
              <code>ScrolledComposite#setShowFocusedControl( boolean )</code> and
              <code>ScrolledComposite#getShowFocusedControl()</code></li>
          <li><code>Table#showColumn( TableColumn )</code></li>
        </ul> 
        ]]>
     </description>
   </entry>
   
   <entry category="JFace / Workbench" milestone="M2">
     <title>
       Layout Override Mechanism
     </title>
     <description>
       <![CDATA[
        To customize an existing RAP design was not possible without touching 
        the providing bundle. Therefore we introduce a new mechanism to make it 
        much easier for adding or replacing own contributions to a design.<br/>          
        The mechanism makes it possible to replace existing LayoutSets. 
        Therefore LayoutSet elements from the 
        <code>org.eclipse.rap.ui.layouts</code> extension point got a new 
        optional attribute called overridesId. To override a single LayoutSet 
        a developer has to create a new extension of 
        <code>org.eclipse.rap.ui.layouts</code> and give it the same id as the 
        Layout which contains the LayoutSet to override. After this he just 
        has to declare a new LayoutSet element and set the overridesId to the 
        original one. <br/>
        <img src="LayoutSetOverridding.png" alt="Overriding LayoutSets"
             title="Screenshot taken from org.eclipse.rap.examples"
               style="margin-top:10px" />
        <br/>
        It's important to use the same identifiers for images, fonts, colors 
        and positions within the <code>ILayoutSetInitializer</code>.                
        ]]>
     </description>
   </entry>
   
   <entry category="JFace / Workbench" milestone="M2">
     <title>
       Tooltips for TableViewer
     </title>
     <description>
       <![CDATA[
            The <code>TableViewer</code> can now display tooltips for its content.
        It can be activated by calling 
        <code>ColumnViewerToolTipSupport#enableFor()</code>. 
        Afterwards you need to override 
        <code>CellLabelProvider#getToolTipText(Object)</code> and have it 
        return the respective tooltip text. Other tooltip-related methods
        (<code>getToolTipBackgroundColor</code>, etc.) are not supported.   
        <br />
        <img src="TableViewerToolTip.jpeg" 
             title="TableViewer showing a tooltip"
             style="margin-top:10px" />
        ]]>
     </description>
   </entry>
   
   <entry category="JFace / Workbench" milestone="M2">
     <title>
       HelpSystem support
     </title>
     <description>
       <![CDATA[
        With the support for the Eclipse Help infrastructure, you're now able
        to integrate the well-known help system into your RAP applications.
        <br />
        <img src="helpsystem.png" 
             title="HelpSystem in Action"
             style="margin-top:10px; margin-bottom:10px"  />
        <br />
        Currently RAP only provides the infrastructure to plug in a help
        system implementation. Depending on your needs you can go ahead and
        use a simple implementation as shown in our
        <a href="http://wiki.eclipse.org/RAP/FAQ#How_to_integrate_the_Eclipse_Help_System_in_a_RAP_application.3F">FAQ</a>.
        In case you are already using the cheatsheets plugin with links to the
        help system, please be sure to include a help system implementation.
        Otherwise your users will not be able to open the associated help
        topics. 
        ]]>
     </description>
   </entry>
   
   <entry category="Look &amp; Feel" milestone="M2">
     <title>
       New Configuration Dialog
     </title>
     <description>
       <![CDATA[
            To provide a more consistent design we replaced the configuration 
        dialog of the Business design with a more lightweight implementation.
        Additionally we added an effect called 
        <a href="http://en.wikipedia.org/wiki/Lightbox_(JavaScript)">Lightbox</a>
        which occurs when the dialog is open. To improve the usability of
        the design we also have disabled the configuration button if a view
        has no actions or viewmenu.          
        <img src="ConfigurationDialog.png" alt="ConfigurationDialog" 
             title="New RAP Business design configuration dialog" 
             style="margin-top:10px" />  
        ]]>
     </description>
   </entry>
   
   <entry category="Look &amp; Feel" milestone="M2">
     <title>
       Fancy design
     </title>
     <description>
       <![CDATA[
        With <a href="news_12.php">RAP 1.2</a> we released a new look and
        feel called business design. With this design we wanted to show
        how RAP can look like in a serious sector. Now we introduce another
        example called fancy design. This design shows that RAP is a
        really modern technology and can look like one too.<br/>
        To use this design a developer should follow the 
        <a href="http://eclipsesource.com/blogs/2009/06/02/yes-its-a-rap-application/">
        steps from the business design</a> and replace the servlet name with 
        "fancy". <br/>
        <img src="fancyDesign.png" alt="RAP fancy design"
               title="Screenshot taken from the RAP fancy design"
               style="margin-top:10px" />
        <br/>
        Please note that we changed a few IDs of some of the <code>
        LayoutSets</code>. So, if you have replaced some LayoutSets please 
        update the <code>overridesId</code> attributes by removing the 
        word "business".              
        ]]>
     </description>
   </entry>

   <entry category="RWT" milestone="M3">
     <title>
       New API added
     </title>
     <description>
       <![CDATA[
        Here is a list of API methods added in this milestone:
        <br />
        <ul>            
          <li><code>Display#addListener()</code> and 
            <code>Display#removeListener()</code> which allow to register for 
            <code>SWT.Close</code> and <code>SWT.Dispose</code> events.
            </li>
          <li><code>Display#disposeExec()</code></li>
          <li><code>Display#close()</code></li>
          <li><code>Shell()</code> default constructor</li>
          <li><code>SelectionEvent#stateMask</code>, that  represents the state
            of the keyboard modifier keys at the time the event was generated
          </li>
          <li>Improved <code>Display#getDefault()</code> - now creates a 
          display if executed from the user-interface thread. (see 
          <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=293809">bug
          293809</a> for details)
          </li>
        </ul>
       ]]>
     </description>
   </entry>

   <entry category="RWT" milestone="M3">
     <title>
       Non-shared SWT Resources
     </title>
     <description>
       <![CDATA[
        Constructors for the following resources were implemented
        <ul>
        <li><code>Cursor</code></li>
        <li><code>Color</code></li>
        <li><code>Font</code></li>
        <li><code>Image</code></li>
        </ul>
        The factory methods (<code>Graphics#get*</code>) are still the 
        recommended way for dealing with resources in RWT. 
        If single-sourcing is desired and the extra memory is justifible, 
        using resource-constructors might be considered.
        <br />
        With this change, also <code>dispose()</code> and 
        <code>isDisposed()</code> were introduced. 
        Even though these methods exist for all resources (shared and non-shared)
        it is considered an error to disposed of factory-created (shared) 
        resources and an <code>IllegalStateException</code> is thrown in this 
        case.
       ]]>
     </description>
   </entry>

   <entry category="RWT" milestone="M3">
     <title>
       Browser History
     </title>
     <description>
       <![CDATA[
       New API has been added to interact with the browser's history stack.
       The <code>IBrowserHistory</code> implementation can be obtained via 
       <code>RWT.getBrowserHistory()</code>.
       To create a new history entry, you can use its <code>createEntry()</code>
       method. In order to receive notification of user-directed changes to the 
       current history entry, use <code>addBrowserHistoryListener()</code>. 
       <br/>
       <img style="margin-top:10px; margin-bottom:10px" src="BrowserHistory.png" />
       <br />
       To see the browser history support in action, see the 
       <a href="http://rap.eclipsesource.com/rapdemo/examples">RAP Examples</a>
       ]]>
     </description>
   </entry>

   <entry category="RWT" milestone="M3">
     <title>
       Customizable focus indicator
     </title>
     <description>
       <![CDATA[
       We implemented a themeable focus indicator for buttons.
       This allows to show the focus rectangle <i>inside</i> the buttons.
       <br />
       <img style="margin-top:10px" src="Button-focus.png" />
       ]]>
     </description>
   </entry>

   <entry category="Look &amp; Feel" milestone="M3">
     <title>
       Theming and new designs
     </title>
     <description>
       <![CDATA[
       We extended the theming for a couple of widgets (such as CTabFolder,
       CLabel, Combo, Spinner and DateTime) and improved the new "fancy"
       design e.g. the support for standalone views was added.<br/>
       <img style="margin-top:10px; margin-bottom:10px" src="fancyStandaloneView.png" />
       <br/>
       A great deal of the bugs and enhancement requests fixed in this
       milestone are related to design and theming.
       ]]>
     </description>
   </entry>

   <entry category="Tooling" milestone="M3">
     <title>
       Session Timeout Option
     </title>
     <description>
       <![CDATA[
       The RAP Application Launcher now has an option to specify the session
       timeout in Seconds. This can come in handy if you whish to test session
       shutdown scenarios and saves you from remembering the lengthy 
       <code>org.eclipse.equinox.http.jetty.context.sessioninactiveinterval</code> 
       VM argument.
       <br/>
       <img style="margin: 10px 10px 0px;" src="SessionTimeout.png" />
       ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M4">
     <title>
       Drag and Drop
     </title>
     <description>
       <![CDATA[
       RAP now supports Drag and Drop. The user can use the mouse and keyboard 
       the way he is used to in his desktop applications to move, copy or link 
       data. The API is SWT-compatible, using <code>DragSource</code>, 
       <code>DropTarget</code> and <code>Transfer</code>.
       <br />
       This first version still has some limitations, in particular: feedback-
       effects (e.g. for trees and tables) are missing, the escape key can not 
       be used to cancel a drag, and the operationChanged-event is not yet 
       thrown. We expect to deliver those features soon.
       <br />
       <img style="margin: 10px 10px 0px;" src="dnd.png" />
       <br />
       To try out drag and drop online, see the 
       <a href="http://rap.eclipsesource.com/rapdemo/examples">RAP Examples</a>
       (go to the <i>List</i> page).
       ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M4">
     <title>
       New API added
     </title>
     <description>
       <![CDATA[
        Here is a list of new API that was added in this milestone:
        <br />
        <ul>
          <li><code>Text#getText(int,int)</code></li>
        </ul>  
        ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M4">
     <title>
       Changes to ISessionStore
     </title>
     <description>
       <![CDATA[
       The <code>ISessionStore</code> has undergone slight API changes.
       The methods <code>addSessionStoreListener</code>, 
       <code>removeSessionStoreListener</code>
       and <code>getAttributeNames</code> are affected in that they don't throw
       an exception anymore when being invoked on an invalidated session.
       <br />
       Instead their return value indicates whether they completed successfully.
       Due to the multi-threaded environment, it is not possible to reliably
       determine the outcome before calling one of these methods (isBound() 
       could have changed meanwhile). Please see the JavaDoc for more details.
       <br />
       We don't expect to break existing clients, the changes are documented here 
       for completeness. However, if you are having trouble file a 
       <a href="http://eclipse.org/rap/bugs.php">new bug</a> or re-open
       <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=278258">bug 278258</a>
       ]]>
     </description>
   </entry>
   
   <entry category="JFace / Workbench" milestone="M4">
     <title>
       ControlDecoration
     </title>
     <description>
       <![CDATA[
       JFace ControlDecoration support has been added. Clients can now
       decorate any kind of control with an image and description text shown
       when the user hovers over the image.
       <img style="margin-top:10px; margin-bottom:10px" src="ControlDecoration.png" />
       <br/>
       ]]>
     </description>
   </entry>
   
   <entry category="Look &amp; Feel" milestone="M4">
     <title>
       Widget Theming
     </title>
     <description>
       <![CDATA[
       Almost all RWT widgets got a new theming. The theming is coupled with the 
       <a href="http://www.eclipse.org/rap/noteworthy/news_13M2.php#Look%20&%20Feel">
       design examples</a>. So, we have created two themes. One for the 
       <a href="http://eclipsesource.com/blogs/2009/06/02/yes-its-a-rap-application/">
       business design</a> which uses a blue color scheme and one for the 
       <a href="http://eclipsesource.com/blogs/2009/09/02/new-fancy-rich-ajax-platform-rap-theme/">
       fancy design</a> which uses a green color scheme. To activate one of these 
       themes just add the bundle <code>org.eclipse.rap.design.example</code> 
       to your launch configuration and set the theming id in your branding to 
       <code>org.eclipse.rap.design.example.business.theme</code> or <code>
       org.eclipse.rap.design.example.fancy.theme</code>.
       <img style="margin-top:10px; margin-bottom:10px" src="RAPNewTheming.png" />
       <br/>
       ]]>
     </description>
   </entry>

   <entry category="RWT" milestone="M5">
     <title>
       BrowserFunction
     </title>
     <description>
       <![CDATA[
       With the support for SWT BrowserFunctions it is now possible to register
       custom Java functions for a Browser widget and call them from JavaScript.
       In addition it allows you to pass any parameters from JavaScript to the
       Java function.
       <br />
       Thanks to the donation of henzler informatik gmbh we were able to acquire
       additional resources to have the BrowserFunction implemented for M5.
       ]]>
     </description>
   </entry>
   
   <entry category="RWT" milestone="M5">
     <title>
       ImageData
     </title>
     <description>
       <![CDATA[
       <code>ImageData</code> and related classes (<code>ImageLoader</code>, 
       <code>ImageLoaderEvent</code>, etc.) are now public API. As a result, the
       <code>Image(Device,ImageData)</code> constructor is also available.
       <br />
       The factory methods (Graphics#getImage) are still the recommended way 
       for creating image in RWT. If single-sourcing is desired and the extra 
       memory is justifible, using constructors might be considered.  
       ]]>
     </description>
   </entry>
   
   <entry category="JFace / Workbench" milestone="M5">
     <title>
       Multi-locale extension registry
     </title>
     <description>
       <![CDATA[
       Since M4, the Equinox 
       <a href="http://download.eclipse.org/eclipse/downloads/drops/S-3.6M4-200912101301/eclipse-news-M4.html#Equinox">
       extension registry is able to handle multiple locales</a>
       (see bug 
       <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=244468">244468</a>
       for details). A socalled LocaleProvider service is used to determine the
       current locale. 
       <br />
       <br />
       The RAP workbench now registers a LocaleProider service that returns the 
       locale based on the RWT locale of the current session.
       <br />
       Please note that you have to add a new system property in order to
       activate the multi-language support for Equinox:
       <br />
       <code>-Declipse.registry.MultiLanguage=true</code>
       <br />
       <br />
       With these changes the <code>org.eclipse.rap.equinox.registry</code> 
       fragment is rendered obsolete.
       ]]>
     </description>
   </entry>
</noteworthy>
