<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright (c) 2011 EclipseSource and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 -->

<noteworthy version="1.5">

  <entry category="RWT" milestone="M1">
    <title>
      q07 Fragment removed
    </title>
    <description>
      <![CDATA[
        The fragment org.eclipse.rap.rwt.q07 is no longer needed and has been removed.
        The contents are now located in the org.eclipse.rap.rwt bundle.
        <p>
        The q07 fragment had originally been introduced to be able to support different versions of
        the qx client library. Meanwhile, we decided to maintain and evolve our own copy of this
        client library
        (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=320993">bug 320993</a>),
        so the fragment is not needed anymore.
        However, with the new protocol
        (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=311355">bug 311355</a>),
        it will become possible to plug in alternative clients for RAP.
        </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      OSGi Integration
    </title>
    <description>
      <![CDATA[
        A new bundle org.eclipse.rap.rwt.osgi has been introduced that integrates RAP with OSGi.
        With this architectural change, it is now possible to use RWT in OSGi applications without
        having to include org.eclipse.rap.ui and all its dependencies.
        Instead of registering your RAP application's entrypoint, theme, etc. as extensions
        (which involves dependencies to the extension registry and more equinox core bundles),
        you can now implement the service interface org.eclipse.rwt.engine.Configurator
        and register it as an OSGi service.
        <code><pre>
public class MyConfigurator implements Configurator {

  public void configure( Context context ) {
    context.addEntryPoint( "default", SimpleEntryPoint.class );
    context.addBranding( new AbstractBranding() {
      @Override
      public String getServletName() {
        return "myapp";
      }
    } );
  }
}
        </pre></code>
        <p>
          The RAP workbench also uses this new bundle to connect with an OSGi HTTP service, so
          you'll always have to add this new bundle to your launch configurations.
        </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      Runtime Feature Split
    </title>
    <description>
      <![CDATA[
        The runtime repository now contains two different features:
        One contains only the RAP bundles and the other feature provides all bundles that are
        required for a complete RAP target platform.
        If you want to create a simple RAP target platform, you'll need both.
        <p>
          This split will make it easier to work with mixed targets.
          If you already have the Equinox Core SDK and Jetty, you'll only need to add RAP itself.
          This way, you prevent duplicate bundles in your target platform.
        </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      Failover and Clustering Support
    </title>
    <description>
      <![CDATA[
      Support for transparent session failover was added to RWT. This enables applications to
      run in a high-availability cluster.
      <p>
        RWT had to be extended in two places to achieve this. An alternatative life cycle was
        implemented that does not use a <em>UI Thread</em> because threads cannot be migrated.
        With this <em>simple</em> life cycle implementation, RAP isn't fully compatible with SWT
        anymore, but the differences are small.
        As a side effect, this life cycle also eases integration with JEE and other 
        technologies that use thread-local variables to access to security or transaction 
        contexts.
      </p>
      <p>
        The second area of work was to enable sessions to be replicated between cluster nodes.
        Therefore all classes in RWT whose instances will have session scope were made serializable.
        Note that application code must also be prepared in that all objects that live in the 
        session scope must be serializable.
      </p>
      <p>
        Serializable RWT sessions can also be used to swap inactive sessions onto disk and thereby
        releasing the memory consumed by them. This allows for infinite session timeout settings
        and saves users from annoying 'the session has timed out' messages.
      </p>
      <p>
        For further details, please visit our
        <a href="http://wiki.eclipse.org/RAP/RWT_Cluster">Cluster wiki page</a>.
      </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      UICallback Improvements
    </title>
    <description>
      <![CDATA[
        The UI callback was redesigned and made more robust.
        <p>
          When a callback request fails, the client sends a new callback request to re-establish
          the broken callback connection. To avoid unnecessary load on the client, retry requests
          are sent with a suitable delay.
        </p>
        <p>
          On some servlet engines, an active UI callback prevented the session from expiring. This
          has been solved so that applications can activate the UI callback without interfering
          with the session timeout.
        </p>
        <p>
          The <a href="http://wiki.eclipse.org/RAP/UI_Callback">Server Push wiki page</a>
          summarizes how the mechanism works internally.
        </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      Text Shadows
    </title>
    <description>
      <![CDATA[
        The Theming now supports text shadows for most widgets that display text:
        Shell, Label, CLabel, CTabFolder, Button, DateTime, ExpandBar, Group, Link,
        List, Spinner, TabFolder, Menu, ToolTip, Combo, CCombo, Tree, Table, Text, and ToolBar
        <img title="Text Shadows in RAP" style="margin-bottom:7px" src="images/Text-Shadows.png" />
        <p>
          Text shadows are not available in Internet Explorer due to this browser's lack of support
          for this feature.
          Transparency for text shadows is supported using the
          <a href="http://www.w3.org/TR/css3-color/#rgba-color">rgba</a> notation for color.
          Example:
        </p>
<code><pre>
Button {
  text-shadow: 0 1px 0 rgba( 0, 0, 0, 0.3 );
}
</pre></code>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>
      Virtual Tree
    </title>
    <description>
      <![CDATA[
        The server-side part of the Tree widget was considerably improved and optimized. Now,
        a Tree with SWT.VIRTUAL style can handle huge item counts without performance degradation.
        <p>
          For a live demo, check out the tab called <em>Complex Data</em> in our
          <a href="http://rap.eclipsesource.com/">Examples demo</a>.
        </p>
      ]]>
    </description>
  </entry>

  <entry category="RWT" milestone="M2">
    <title>
      New Client/Server Protocol
    </title>
    <description>
      <![CDATA[
        We planned this for a long time, and now it's becoming reality:
        the communication between server and client is being replaced with a new, JSON-based format
        (see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=311355">bug 311355</a>).
        This new protocol will enable alternative clients for RAP.
        <p>
          In this mileston we focused our efforts on reworking widgets LCAs to utilize this new 
          protocol for communication with the client.
          The following widgets are already using the new protocol:
          Button, Combo, Composite, Group, Label, Link, ProgressBar, Sash, Scale, Shell, Slider, 
          Spinner, Text, CCombo and CLabel. Changes are currently tracked in 
          <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=351945">bug 351945</a>.
          Also the text size determination has been switched to the protocol.
        </p>
        <p>
          This screenshot shows a snippet of a server response in the Chrome developer tooling:
          <img src="images/RAP-Protocol.png" style="margin-top: 10px; margin-bottom: 10px"/>
        </p>
      ]]>
    </description>
  </entry>

<!--
  NOTE [rst]: Decided to change API before publishing

  <entry category="RWT" milestone="M2">
    <title>
      Experimental support for markup in Tables
    </title>
    <description>
      <![CDATA[
      The table was enhanced to allow markup in item texts
      (i.e. in calls to <code>TableItem#setText()</code>).
      <p>
        <img src="???" />
  
        <code><pre>
table.setData( Table.ITEM_HEIGHT, new Integer( 90 ) );
HashMap<String,Image> imageMap = new HashMap<String,Image>();
imageMap.put( "user", userImage );
table.setData( Table.IMAGE_MAP, imageMap );
String text
  = "<html>" 
  + "<img src='user'/><font name='sans serif' height='16'>John Doe</font><br/>Managing Director" 
  + "</html>";
tableItem.setText( text );
        </pre></code>
      </p>
      <p>
        Please note that the implementation is in an early stage and in particluar the API is 
        likely to change. Changes are currently tracked in 
        <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=346768">bug 346768</a>.
        See the JavaDoc for <code>Table#ENABLE_RICH_TEXT</code> for further information on how 
        to use this feature.
      </p>
      ]]>
    </description>
  </entry>
-->
 
</noteworthy>
