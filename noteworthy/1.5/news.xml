<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright (c) 2011, 2012 EclipseSource and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 -->

<noteworthy version="1.5">

  <entry category="RWT" milestone="M1">
    <title>q07 Fragment removed</title>
    <description>
      <p>
        The fragment org.eclipse.rap.rwt.q07 is no longer needed and has been removed.
        The contents are now located in the org.eclipse.rap.rwt bundle.
      </p>
      <p>
        The q07 fragment had originally been introduced to be able to support different versions of
        the qx client library. Meanwhile, we decided to maintain and evolve our own copy of this
        client library
        (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=320993">bug 320993</a>),
        so the fragment is not needed anymore.
        However, with the new protocol
        (<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=311355">bug 311355</a>),
        it will become possible to plug in alternative clients for RAP.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>OSGi Integration</title>
    <description>
      <p>
        A new bundle org.eclipse.rap.rwt.osgi has been introduced that integrates RAP with OSGi.
        With this architectural change, it is now possible to use RWT in OSGi applications without
        having to include org.eclipse.rap.ui and all its dependencies.
        Instead of registering your RAP application's entrypoint, theme, etc. as extensions
        (which involves dependencies to the extension registry and more equinox core bundles),
        you can now implement the service interface 
        <code>org.eclipse.rwt.engine.ApplicationConfigurator</code> and register it as an OSGi 
        service.
      </p>
      <pre><code>public class MyConfigurator implements ApplicationConfigurator {
  public void configure( ApplicationConfiguration configuration ) {
    configuration.addEntryPoint( "default", SimpleEntryPoint.class );
    configuration.addBranding( new AbstractBranding() {
      public String getServletName() {
        return "myapp";
      }
    } );
  }
}</code></pre>
      <p>
        The RAP workbench also uses this new bundle to connect with an OSGi HTTP service, so
        you'll always have to add this new bundle to your launch configurations.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>Runtime Feature Split</title>
    <description>
      <p>
        The runtime repository now contains two different features:
        One contains only the RAP bundles and the other feature provides all bundles that are
        required for a complete RAP target platform.
        If you want to create a simple RAP target platform, you'll need both.
      </p>
      <p>
        This split will make it easier to work with mixed targets.
        If you already have the Equinox Core SDK and Jetty, you'll only need to add RAP itself.
        This way, you prevent duplicate bundles in your target platform.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>Failover and Clustering Support</title>
    <description>
      <p>
        Support for transparent session failover was added to RWT. This enables applications to
        run in a high-availability cluster.
      </p>
      <p>
        RWT had to be extended in two places to achieve this. An alternatative life cycle was
        implemented that does not use a <em>UI Thread</em> because threads cannot be migrated.
        With this <em>simple</em> life cycle implementation, RAP isn't fully compatible with SWT
        anymore, but the differences are small.
        As a side effect, this life cycle also eases integration with JEE and other 
        technologies that use thread-local variables to access to security or transaction 
        contexts.
      </p>
      <p>
        The second area of work was to enable sessions to be replicated between cluster nodes.
        Therefore all classes in RWT whose instances will have session scope were made serializable.
        Note that application code must also be prepared in that all objects that live in the 
        session scope must be serializable.
      </p>
      <p>
        Serializable RWT sessions can also be used to swap inactive sessions onto disk and thereby
        releasing the memory consumed by them. This allows for infinite session timeout settings
        and saves users from annoying 'the session has timed out' messages.
      </p>
      <p>
        For further details, please visit our
        <a href="http://wiki.eclipse.org/RAP/RWT_Cluster">Cluster wiki page</a>.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>UICallback Improvements</title>
    <description>
      <p>
        The UI callback was redesigned and made more robust.
      </p>
      <p>
        When a callback request fails, the client sends a new callback request to re-establish
        the broken callback connection. To avoid unnecessary load on the client, retry requests
        are sent with a suitable delay.
      </p>
      <p>
        On some servlet engines, an active UI callback prevented the session from expiring. This
        has been solved so that applications can activate the UI callback without interfering
        with the session timeout.
      </p>
      <p>
        The <a href="http://wiki.eclipse.org/RAP/UI_Callback">Server Push wiki page</a>
        summarizes how the mechanism works internally.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>Text Shadows</title>
    <description>
      <p>
        The Theming now supports text shadows for most widgets that display text:
        Shell, Label, CLabel, CTabFolder, Button, DateTime, ExpandBar, Group, Link,
        List, Spinner, TabFolder, Menu, ToolTip, Combo, CCombo, Tree, Table, Text, and ToolBar
      </p>
      <p>
        <img class="framed" title="Text Shadows in RAP" src="images/Text-Shadows.png" />
      </p>
      <p>
        Text shadows are not available in Internet Explorer due to this browser's lack of support
        for this feature.
        Transparency for text shadows is supported using the
        <a href="http://www.w3.org/TR/css3-color/#rgba-color">rgba</a> notation for color.
        Example:
      </p>
      <pre><code>Button {
  text-shadow: 0 1px 0 rgba( 0, 0, 0, 0.3 );
}</code></pre>
    </description>
  </entry>

  <entry category="RWT" milestone="M1">
    <title>Virtual Tree</title>
    <description>
      <p>
        The server-side part of the Tree widget was considerably improved and optimized. Now,
        a Tree with SWT.VIRTUAL style can handle huge item counts without performance degradation.
      </p>
      <p>
        For a live demo, check out the tab called <em>Complex Data</em> in our
        <a href="http://rap.eclipsesource.com/">Examples demo</a>.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M2">
    <title>New Client/Server Protocol</title>
    <description>
        <p>
          We planned this for a long time, and now it's becoming reality:
          the communication between server and client is being replaced with a new, JSON-based format
          (see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=311355">bug 311355</a>).
          This new protocol will enable alternative client implementations for RAP.
        </p>
        <p>
          In this milestone, we focused our efforts on retrofitting LCAs to utilize this new
          protocol for communication with the client.
          The following widgets are already using the new protocol:
          Button, Combo, Composite, Group, Label, Link, ProgressBar, Sash, Scale, Shell, Slider,
          Spinner, Text, CCombo and CLabel. Changes are currently tracked in
          <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=351945">bug 351945</a>.
          Also the text size determination has been switched to the protocol.
        </p>
        <p>
          <img class="framed" src="images/RAP-Protocol.png" />
        </p>
        <p>
          We're planning to complete this conversion before the end of this year.
          As the protocol stabilizes, we'll update the specification on the
          <a href="http://wiki.eclipse.org/RAP/Protocol">RAP Protocol wiki page</a>.
        </p>
    </description>
  </entry>
  
  <entry category="RWT" milestone="M3">
    <title>New Default Theme</title>
    <description>
      <p>
        RAP 1.5 is about to get a new default look.
        The new theme aims at bringing a modern, decent look into RAP applications
        with more white space and subtle usage of roundings, shadows and gradients.
        To achieve this, the themability of many RWT widgets has been extended by adding missing CSS properties.
        The new look is already part of M3, but we will continue to improve and polish the theme during the next months.
        Any feedback is highly welcome.
      </p>
      <p>
        <img class="framed" src="images/NewTheme-Dialog.png" />
        <img class="framed" src="images/NewTheme-Form.png" />
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M3">
    <title>Improved Internet Explorer 9 Support</title>
    <description>
      <p>
        Internet Explorer 9 was a significant improvement over previous versions, finally catching
        up to other browsers regarding performance and compatibility.
        RAP can now fully utilize all its new features (HTML5, CSS3, SVG) by switching to standard
        rendering in IE9 (as opposed to quirksmode used for previous IE versions).
        This gives RAP applications a noticable performance-boost in IE9, especially when using GC
        for drawing complex graphs.
      </p>
      <p>
        As technology marches on, we also decidded to no longer offically support IE6 in RAP 1.5.
        RAP 1.4 will continue to support it.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M3">
    <title>
      Simplified RWT Startup
    </title>
    <description>
      <p>
        The way to start standalone RWT applications has been changed.
        The former init parameters have been replaced by an API that allows you to 
        configure all aspects of the application to be started.
        This web.xml fragment and code snippet shows how starting an RWT application now looks like:
      </p>
      <pre><code><b>&lt;context-param&gt;</b>
  <b>&lt;param-name&gt;</b>org.eclipse.rwt.Configurator<b>&lt;/param-name&gt;</b>
  <b>&lt;param-value&gt;</b>com.example.ExampleConfigurator<b>&lt;/param-value&gt;</b>
<b>&lt;/context-param&gt;</b>
<b>&lt;listener&gt;</b>
  <b>&lt;listener-class&gt;</b>org.eclipse.rwt.engine.RWTServletContextListener<b>&lt;/listener-class&gt;</b>
<b>&lt;/listener&gt;</b></code></pre>
<pre><code>public class ExampleConfigurator implements ApplicationConfigurator {
  public void configure( ApplicationConfiguration configuration ) {
    configuration.addEntryPoint( "default", ExampleEntryPoint.class );
    configuration.addBranding( new ExampleBranding() );
    // ...
  }
}</code></pre>
      <p>
        The <code>RWTServletContextListener</code> needs to be registered so that RWT is
        notified when the servlet context is created.
        The remaining init parameter is used to specify a <em>configurator</em>, an
        implementation of <code>ApplicationConfigurator</code>. This class is created and
        its <code>configure</code> method is called before the application starts.
        With the given <code>ApplicationConfiguration</code> object you can control all
        aspects of the application.
      </p>
      <p>
        Please read this
        <a href="http://wiki.eclipse.org/RAP/FAQ#How_do_I_develop_an_RWT_standalone_application_with_RAP_.3E.3D_1.5">FAQ</a>
        entry for more details.
        We will integrate this information into the developer documentation before the 1.5 release.
      </p>
    </description>
  </entry>
  
  <entry category="RWT" milestone="M3">
    <title>New Client/Server Protocol</title>
    <description>
      <p>
        In this milestone, we switched some more widgets to the new client/server protocol like Tree, 
        TabFolder, Browser and ToolBar.
      </p>
      <p>
        We're planning to complete this conversion before the end of this year.
        As the protocol stabilizes, we'll update the specification on the
        <a href="http://wiki.eclipse.org/RAP/Protocol">RAP Protocol wiki page</a>.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M4">
    <title>New Client/Server Protocol</title>
    <description>
      <p>
        With this milestone, all Ajax responses from a RAP server are now in plain JSON format.
        No JavaScript is included anymore.
        This makes the responses much more readable and eases debugging.
      </p>
      <p>
        <img class="framed" src="images/Firebug-JSON.png" />
      </p>
      <p>
        With this new protocol, it is now possible to develop alternative clients for RAP.
        The exact format is described in the
        <a href="http://wiki.eclipse.org/RAP/Protocol">RAP Protocol wiki page</a>.
        Some details may still change until the release.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M4">
    <title>Target Platform Changes</title>
    <description>
      <p>
        Since RAP 1.5 will be available togehter with Eclipse Juno, the target platform is now based
        on Eclipse 4.2 instead of 3.8.
        However, the RAP implementation of the Eclipse Workbench remains to be based on 3.x.
        But there are a couple of important changes in the target platform.
      </p>
      <ul>
        <li>
          The servlet 3.0 API packages are now exported as version 2.6.0 to comply with the
          OSGi versioning rules
          (see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=360245">bug 360245</a>).
        </li>
        <li>
          The target platform includes Jetty 8 instead of Jetty 6.
          This is not just a change of the version number, also the package names have changed
          from <code>org.mortbay.jetty</code> to <code>org.eclipse.jetty</code>.
          Instead of two, Jetty now consists of seven bundles.
        </li>
        <li>
          The platform now includes a new OSGi console based on the Apache Felix Gogo project.
          Therefore, the basic target platform for RAP applications now contains three bundles
          (<code>org.apache.felix.gogo.*</code>) support it.
        </li>
      </ul>
      <p>
        Please adapt your launch configurations to these changes as needed.
      </p>
    </description>
  </entry>

  <entry category="RWT" milestone="M5">
    <title>Fallback for Custom Themes</title>
    <description>
      <p>
        The RAP default theme is now an equitable theme, and it is no longer used as a fallback for
        custom themes.
      	Instead of the default theme, all theming properties now have a default value which is used
        as a fallback in case the theme does not define a value for this property.
      </p>
      <p>
        Unlike the RAP default theme, these fallback values will not change.
      	They are chosen to be plain values without any effects, i.e. no gradients, rounded borders,
      	or shadows, just plain black-and-white.
      	With this change, custom themes will be more stable.
      	Changes to the RAP default theme will not affect custom themes anymore.
      </p>
      <p>
        The default values are still defined in the respective
        <code>&lt;Widget&gt;.default.css</code> files, and the RAP default theme is now contained
        in a file of its own.
      </p>
    </description>
  </entry>

<!--
  NOTE [rst]: Decided to change API before publishing

  <entry category="RWT" milestone="M2">
    <title>
      Experimental support for markup in Tables
    </title>
    <description>
      
      The table was enhanced to allow markup in item texts
      (i.e. in calls to <code>TableItem#setText()</code>).
      <p>
        <img src="???" />
  
        <code><pre>
table.setData( Table.ITEM_HEIGHT, new Integer( 90 ) );
HashMap<String,Image> imageMap = new HashMap<String,Image>();
imageMap.put( "user", userImage );
table.setData( Table.IMAGE_MAP, imageMap );
String text
  = "<html>" 
  + "<img src='user'/><font name='sans serif' height='16'>John Doe</font><br/>Managing Director" 
  + "</html>";
tableItem.setText( text );
        </pre></code>
      </p>
      <p>
        Please note that the implementation is in an early stage and in particluar the API is 
        likely to change. Changes are currently tracked in 
        <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=346768">bug 346768</a>.
        See the JavaDoc for <code>Table#ENABLE_RICH_TEXT</code> for further information on how 
        to use this feature.
      </p>
      
    </description>
  </entry>
-->
 
</noteworthy>
